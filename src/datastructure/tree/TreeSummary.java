package datastructure.tree;

/**
 * @author AndyCui
 * @date 2018/10/16 上午10:16
 * @description 对于大量的输入数据，链表的线性访问时间太慢。平均时间复杂度为O（N）。
 * 树的定义（递归方式）：一棵树是一些节点的集合，这个集合可以是空集；若不是空集，则树由称作根的结点
 * r以及0个或多个非空的子树组成，这些子树中的每一棵的根都被来自r的一条有向的边所连接。
 * 由递归的定义可以发现，一棵树是N个结点和N-1条边的集合，其中的一个结点叫做根。
 * 从结点N1到Nk的路径定义为节点N1,N2,...Nk的一个序列，使得对于1<=i<k节点Ni是节点Ni+1的父亲，这条
 * 路径的长为该路径的边的条数，即k-1。从每一个结点到它自己有一条长为零的路径。注意 在一棵树中从根
 * 到每个节点恰好存在一条路径。
 * 对任意节点Ni，Ni的深度为从根到Ni的唯一路径的长。因此，根的深度为0。Ni的高是从Ni到一片树叶的最长路径的长，
 * 因此所有的树叶的高都是0。一棵树的高等于它的根的高，一棵树的深度等于它的最深的树叶的深度；该深度总是等于这棵树的高。
 *
 *
 * 树的实现：将每个节点的所有儿子都放在树节点的链表中。
 * 树的遍历：先序遍历 在先序遍历中，对节点的处理工作是在它的诸儿子被处理之前进行的。
 * 后序遍历 在后序遍历中，一个节点处的工作是在它的诸儿子节点被计算之后进行的。
 *
 * AVL树是带有平衡条件的二叉查找树。一棵AVL树是其每个节点的左子树和右子树的高度最多差1的二叉查找树。
 *
 *
 * B树：
 */
public class TreeSummary {

}
